{"name":"UbuntuPostInstall","body":"===============================\r\nUbuntu post-installation script\r\n===============================\r\n\r\nWith this Python script you will avoid wasting time to install and \r\nconfigure your Ubuntu 12.04 operating system. Just download this script, \r\nrun it with your favorite configuration file and ... envoy !\r\n\r\nThe script can:\r\n\r\n* Install Ubuntu repositories (deb repos, PPA, ...)\r\n* Install packages\r\n* Configure dots files (.bashrc, .vimrc, ...)\r\n* Configure the user interface (support Unity and Gnome Shell)\r\n* Run every command line\r\n\r\n## How to use this script ?\r\n\r\nJust download and run it with the following command lines:\r\n\r\n    $ wget https://raw.github.com/nicolargo/ubuntupostinstall/master/ubuntu-12.04-postinstall.py\r\n    $ chmod a+x ubuntu-12.04-postinstall.py\r\n    $ sudo ./ubuntu-12.04-postinstall.py\r\n\r\nBy default, the script will download and use this configuration file.\r\nhttps://github.com/nicolargo/ubuntupostinstall/blob/master/ubuntu-12.04-unity-postinstall.cfg\r\n\r\n## Use anothers configurations files\r\n\r\nUsing the -c option, you can select an alternative configuration file.\r\n\r\nFor example, you can configure Ubuntu for Gnome Shell using:\r\n\r\n    $ sudo ./ubuntu-12.04-postinstall.py -c https://raw.github.com/nicolargo/ubuntupostinstall/master/ubuntu-12.04-gnomeshell-postinstall.cfg\r\n\r\nIf you want to use a local confgiuration file (adapted to yours needs):\r\n\r\n    $ sudo ./ubuntu-12.04-postinstall.py -c mycfg.cfg\r\n\r\n## Create your own configuration file\r\n\r\nThe configuration files is organized into sections, and each section \r\ncan contain name-value pairs for configuration data.\r\n\r\n### preactions section\r\n\r\nThis is the first section of the configuration file.\r\n\r\nA line starting with the action_ string (following by the action name) defines a \r\naction (command line) to be executed.\r\n\r\nThe action name will be displayed during the script execution.\r\n\r\nThe lines will be executed before all the others steps.\r\n\r\nExample:\r\n\r\n    [preactions]\r\n    action_dummy = dpkg -l > /tmp/pkg-before.txt\r\n\r\nThe dummy action will create a /tmp/pkg-before.txt with a listing of \r\nall the packages installed on your system.\r\n\r\n### repos section\r\n\r\nIn this section, user can install the repositories (deb repository or PPA).\r\n\r\n* ppa_xxx = ppa:ppauser/ppaname > Add the ppa:ppauser/ppaname to the system\r\n* pkg_xxx = pkglist             > Add the package list (space separed) to the system\r\n* url_xxx = http://reposurl     > Add the repository URL to the system \r\n* key_xxx = key                 > Add the repository key to the system \r\n\r\nxxx define the name of the action and will be displayed during the script execution.\r\n\r\nExample:\r\n\r\n    [repos]\r\n    ppa_glances = ppa:arnaud-hartmann/glances-stable\r\n    pkg_glances = glances\r\n    \r\nInstall the Glances PPA on the system and install the glances software.\r\n\r\n### packages section\r\n\r\nFrom this section, you can install all your softwares, gathered by \r\nfunction, needs...\r\n\r\nExample:\r\n\r\n    [packages]\r\n    network = iftop ifstat\r\n    dev = vim git \r\n\r\nInstall iftop, ifstat, vim and git. Display \"Install network packages\" and \"Install \r\ndev packages\" during the script execution.\r\n\r\n### dotfiles section\r\n\r\nThis section is dedicated to the dot files (.bash, .vimrc...) installed in your \r\nhome folder. \r\n\r\nThe script can install the following dot files from URL:\r\n\r\n* bashrc: BASH main configuration file\r\n* bashrc_prompt: BASH prompt configuration\r\n* bashrc_aliases: BASH aliases\r\n* vimrc: VIM main configuration file\r\n* htoprc: HTOP main configuration file\r\n\r\nExample:\r\n\r\n    [dotfiles]\r\n    bashrc = https://raw.github.com/nicolargo/dotfiles/master/bashrc\r\n\r\nCreate the ~/.bashrc from the https://raw.github.com/nicolargo/dotfiles/master/bashrc\r\n\r\n### unity and gnome3 sections\r\n\r\nConfigure Unity or Gnome Shell:\r\n\r\n* theme: Configure the GTK theme (name)\r\n* icons: Configure the icons theme (name)\r\n* cursors: Configure the cursors theme (name)\r\n* conky: Conky main configuration file (URL)\r\n\r\nFor the themes, packages have to be installed in the repos or packages sections.\r\n\r\n    [gnome3]\r\n    theme = Boomerang\r\n    icons = Faenza\r\n    cursors = DMZ-White\r\n    conky = https://raw.github.com/nicolargo/ubuntupostinstall/master/conkyrc\r\n\r\nConfigure Gnome Shell with the Boomerang GTK theme, Faenza icons and DMZ-White \r\ncursors. Configure Conky with the https://raw.github.com/nicolargo/ubuntupostinstall/master/conkyrc \r\nconfiguration file.\r\n\r\nYou can NOT use both unity and gnome3 section in the same .cfg file.\r\n\r\n### postactions section\r\n\r\nThis is the last section of the configuration file.\r\n\r\nA line starting with the action_ string (following by the action name) defines a \r\naction (command line) to be executed.\r\n\r\nThe action name will be displayed during the script execution.\r\n\r\nThe lines will be executed after all the others steps.\r\n\r\nExample:\r\n\r\n    [postactions]\r\n    action_dummy = dpkg -l > /tmp/pkg-after.txt\r\n\r\nThe dummy action will create a /tmp/pkg-before.txt with a listing of \r\nall the packages installed on your system after the script execution.\r\n\r\n## Contribute ?\r\n\r\nNeed a new function ? \r\n\r\nFound a bug ?\r\n\r\nPlease fill an issue here: https://github.com/nicolargo/ubuntupostinstall/issues/new","tagline":"Post installation script with easy configuration file","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}